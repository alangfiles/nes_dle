;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_pad_poll
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_get_pad_new
	.import		_set_scroll_y
	.import		_flush_vram_update2
	.export		_pad1
	.export		_pad1_new
	.export		_cursor_x_start
	.export		_cursor_x
	.export		_cursor_y
	.export		_cursor_y_level
	.export		_cursor_x_level
	.export		_index
	.export		_temp_y
	.export		_game_mode
	.export		_tempint
	.export		_word_to_guess
	.export		_guess_1_1
	.export		_guess_1_1_status
	.export		_guess_1_2
	.export		_guess_1_2_status
	.export		_guess_1_3
	.export		_guess_1_3_status
	.export		_guess_1_4
	.export		_guess_1_4_status
	.export		_guess_1_5
	.export		_guess_1_5_status
	.export		_guess_2_1
	.export		_guess_2_1_status
	.export		_guess_2_2
	.export		_guess_2_2_status
	.export		_guess_2_3
	.export		_guess_2_3_status
	.export		_guess_2_4
	.export		_guess_2_4_status
	.export		_guess_2_5
	.export		_guess_2_5_status
	.export		_guess_3_1
	.export		_guess_3_1_status
	.export		_guess_3_2
	.export		_guess_3_2_status
	.export		_guess_3_3
	.export		_guess_3_3_status
	.export		_guess_3_4
	.export		_guess_3_4_status
	.export		_guess_3_5
	.export		_guess_3_5_status
	.export		_guess_4_1
	.export		_guess_4_1_status
	.export		_guess_4_2
	.export		_guess_4_2_status
	.export		_guess_4_3
	.export		_guess_4_3_status
	.export		_guess_4_4
	.export		_guess_4_4_status
	.export		_guess_4_5
	.export		_guess_4_5_status
	.export		_guess_5_1
	.export		_guess_5_1_status
	.export		_guess_5_2
	.export		_guess_5_2_status
	.export		_guess_5_3
	.export		_guess_5_3_status
	.export		_guess_5_4
	.export		_guess_5_4_status
	.export		_guess_5_5
	.export		_guess_5_5_status
	.export		_guess_6_1
	.export		_guess_6_1_status
	.export		_guess_6_2
	.export		_guess_6_2_status
	.export		_guess_6_3
	.export		_guess_6_3_status
	.export		_guess_6_4
	.export		_guess_6_4_status
	.export		_guess_6_5
	.export		_guess_6_5_status
	.export		_guess_X_1
	.export		_guess_X_1_status
	.export		_guess_X_2
	.export		_guess_X_2_status
	.export		_guess_X_3
	.export		_guess_X_3_status
	.export		_guess_X_4
	.export		_guess_X_4_status
	.export		_guess_X_5
	.export		_guess_X_5_status
	.export		_cur_guess_level
	.export		_cur_guess_char
	.export		_cur_guess_space
	.export		_cur_guess_one
	.export		_cur_guess_two
	.export		_cur_guess_three
	.export		_cur_guess_four
	.export		_cur_guess_five
	.export		_check_one
	.export		_check_two
	.export		_check_three
	.export		_check_four
	.export		_check_five
	.export		_keyboard_zero
	.export		_keyboard_one
	.export		_keyboard_two
	.export		_palette_bg
	.export		_palette_sp
	.export		_draw_sprites
	.export		_draw_keyboard_selection
	.export		_draw_guesses
	.export		_draw_cur_guess
	.export		_draw_keyboard
	.export		_keyboard_movement
	.export		_init_game
	.export		_reset_cur_level
	.export		_submit_guess
	.export		_select_word
	.export		_main

.segment	"DATA"

_word_to_guess:
	.byte	$43,$41,$52,$47,$4F

.segment	"RODATA"

_keyboard_zero:
	.byte	$51,$57,$45,$52,$54,$59,$55,$49,$4F,$50,$00
_keyboard_one:
	.byte	$41,$53,$44,$46,$47,$48,$4A,$4B,$4C,$00
_keyboard_two:
	.byte	$5A,$58,$43,$56,$42,$4E,$4D,$00
_palette_bg:
	.byte	$0F
	.byte	$00
	.byte	$30
	.byte	$38
	.byte	$0F
	.byte	$2D
	.byte	$30
	.byte	$38
	.byte	$0F
	.byte	$28
	.byte	$30
	.byte	$38
	.byte	$0F
	.byte	$1A
	.byte	$30
	.byte	$38
_palette_sp:
	.byte	$0F
	.byte	$38
	.byte	$30
	.byte	$38
	.byte	$0F
	.byte	$00
	.byte	$30
	.byte	$38
	.byte	$0F
	.byte	$28
	.byte	$30
	.byte	$38
	.byte	$0F
	.byte	$1A
	.byte	$30
	.byte	$38
L0046:
	.byte	$50,$72,$65,$73,$73,$20,$53,$74,$61,$72,$74,$20,$74,$6F,$20,$50
	.byte	$6C,$61,$79,$00
L003C:
	.byte	$4E,$45,$53,$2E,$44,$4C,$45,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_cursor_x_start:
	.res	1,$00
_cursor_x:
	.res	1,$00
_cursor_y:
	.res	1,$00
_cursor_y_level:
	.res	1,$00
_cursor_x_level:
	.res	1,$00
_index:
	.res	1,$00
_temp_y:
	.res	1,$00
_game_mode:
	.res	1,$00
_tempint:
	.res	2,$00
_guess_1_1:
	.res	1,$00
_guess_1_1_status:
	.res	1,$00
_guess_1_2:
	.res	1,$00
_guess_1_2_status:
	.res	1,$00
_guess_1_3:
	.res	1,$00
_guess_1_3_status:
	.res	1,$00
_guess_1_4:
	.res	1,$00
_guess_1_4_status:
	.res	1,$00
_guess_1_5:
	.res	1,$00
_guess_1_5_status:
	.res	1,$00
_guess_2_1:
	.res	1,$00
_guess_2_1_status:
	.res	1,$00
_guess_2_2:
	.res	1,$00
_guess_2_2_status:
	.res	1,$00
_guess_2_3:
	.res	1,$00
_guess_2_3_status:
	.res	1,$00
_guess_2_4:
	.res	1,$00
_guess_2_4_status:
	.res	1,$00
_guess_2_5:
	.res	1,$00
_guess_2_5_status:
	.res	1,$00
_guess_3_1:
	.res	1,$00
_guess_3_1_status:
	.res	1,$00
_guess_3_2:
	.res	1,$00
_guess_3_2_status:
	.res	1,$00
_guess_3_3:
	.res	1,$00
_guess_3_3_status:
	.res	1,$00
_guess_3_4:
	.res	1,$00
_guess_3_4_status:
	.res	1,$00
_guess_3_5:
	.res	1,$00
_guess_3_5_status:
	.res	1,$00
_guess_4_1:
	.res	1,$00
_guess_4_1_status:
	.res	1,$00
_guess_4_2:
	.res	1,$00
_guess_4_2_status:
	.res	1,$00
_guess_4_3:
	.res	1,$00
_guess_4_3_status:
	.res	1,$00
_guess_4_4:
	.res	1,$00
_guess_4_4_status:
	.res	1,$00
_guess_4_5:
	.res	1,$00
_guess_4_5_status:
	.res	1,$00
_guess_5_1:
	.res	1,$00
_guess_5_1_status:
	.res	1,$00
_guess_5_2:
	.res	1,$00
_guess_5_2_status:
	.res	1,$00
_guess_5_3:
	.res	1,$00
_guess_5_3_status:
	.res	1,$00
_guess_5_4:
	.res	1,$00
_guess_5_4_status:
	.res	1,$00
_guess_5_5:
	.res	1,$00
_guess_5_5_status:
	.res	1,$00
_guess_6_1:
	.res	1,$00
_guess_6_1_status:
	.res	1,$00
_guess_6_2:
	.res	1,$00
_guess_6_2_status:
	.res	1,$00
_guess_6_3:
	.res	1,$00
_guess_6_3_status:
	.res	1,$00
_guess_6_4:
	.res	1,$00
_guess_6_4_status:
	.res	1,$00
_guess_6_5:
	.res	1,$00
_guess_6_5_status:
	.res	1,$00
_guess_X_1:
	.res	1,$00
_guess_X_1_status:
	.res	1,$00
_guess_X_2:
	.res	1,$00
_guess_X_2_status:
	.res	1,$00
_guess_X_3:
	.res	1,$00
_guess_X_3_status:
	.res	1,$00
_guess_X_4:
	.res	1,$00
_guess_X_4_status:
	.res	1,$00
_guess_X_5:
	.res	1,$00
_guess_X_5_status:
	.res	1,$00
_cur_guess_level:
	.res	1,$00
_cur_guess_char:
	.res	1,$00
_cur_guess_space:
	.res	1,$00
_cur_guess_one:
	.res	1,$00
_cur_guess_two:
	.res	1,$00
_cur_guess_three:
	.res	1,$00
_cur_guess_four:
	.res	1,$00
_cur_guess_five:
	.res	1,$00
_check_one:
	.res	1,$00
_check_two:
	.res	1,$00
_check_three:
	.res	1,$00
_check_four:
	.res	1,$00
_check_five:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; draw_keyboard_selection();
;
	jsr     _draw_keyboard_selection
;
; draw_guesses();
;
	jsr     _draw_guesses
;
; draw_cur_guess();
;
	jmp     _draw_cur_guess

.endproc

; ---------------------------------------------------------------
; void __near__ draw_keyboard_selection (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_keyboard_selection: near

.segment	"CODE"

;
; cursor_x = 0;
;
	lda     #$00
	sta     _cursor_x
;
; for (index = 0; index < cursor_x_level; ++index)
;
	sta     _index
	tax
L0462:	lda     _index
	cmp     _cursor_x_level
	txa
	sbc     #$00
	bcs     L0463
;
; cursor_x += 16;
;
	lda     #$10
	clc
	adc     _cursor_x
	sta     _cursor_x
;
; for (index = 0; index < cursor_x_level; ++index)
;
	inc     _index
	jmp     L0462
;
; cursor_y = 0;
;
L0463:	lda     #$00
	sta     _cursor_y
;
; for (index = 0; index < cursor_y_level; ++index)
;
	sta     _index
L0464:	lda     _index
	cmp     _cursor_y_level
	txa
	sbc     #$00
	bcs     L0465
;
; cursor_y += 16;
;
	lda     #$10
	clc
	adc     _cursor_y
	sta     _cursor_y
;
; for (index = 0; index < cursor_y_level; ++index)
;
	inc     _index
	jmp     L0464
;
; cursor_x_start = 0;
;
L0465:	lda     #$00
	sta     _cursor_x_start
;
; if (cursor_y_level == 0)
;
	lda     _cursor_y_level
	bne     L0466
;
; cursor_x_start = 48;
;
	lda     #$30
	sta     _cursor_x_start
;
; if (cursor_y_level == 1)
;
L0466:	lda     _cursor_y_level
	cmp     #$01
	bne     L0467
;
; cursor_x_start = 56;
;
	lda     #$38
	sta     _cursor_x_start
;
; if (cursor_y_level == 2)
;
L0467:	lda     _cursor_y_level
	cmp     #$02
	bne     L0160
;
; cursor_x_start = 72;
;
	lda     #$48
	sta     _cursor_x_start
;
; oam_spr(cursor_x_start + cursor_x, 160 + cursor_y, ' ', 0);
;
L0160:	jsr     decsp3
	lda     _cursor_x_start
	clc
	adc     _cursor_x
	ldy     #$02
	sta     (sp),y
	lda     _cursor_y
	clc
	adc     #$A0
	dey
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	tya
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_guesses (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_guesses: near

.segment	"CODE"

;
; temp_y = 40;
;
	lda     #$28
	sta     _temp_y
;
; if (cur_guess_level != 0)
;
	lda     _cur_guess_level
	jeq     L0468
;
; oam_spr(84, temp_y, guess_1_1, guess_1_1_status);
;
	jsr     decsp3
	lda     #$54
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_1_1
	dey
	sta     (sp),y
	lda     _guess_1_1_status
	jsr     _oam_spr
;
; oam_spr(100, temp_y, guess_1_2, guess_1_2_status);
;
	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_1_2
	dey
	sta     (sp),y
	lda     _guess_1_2_status
	jsr     _oam_spr
;
; oam_spr(116, temp_y, guess_1_3, guess_1_3_status);
;
	jsr     decsp3
	lda     #$74
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_1_3
	dey
	sta     (sp),y
	lda     _guess_1_3_status
	jsr     _oam_spr
;
; oam_spr(132, temp_y, guess_1_4, guess_1_4_status);
;
	jsr     decsp3
	lda     #$84
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_1_4
	dey
	sta     (sp),y
	lda     _guess_1_4_status
	jsr     _oam_spr
;
; oam_spr(148, temp_y, guess_1_5, guess_1_5_status);
;
	jsr     decsp3
	lda     #$94
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_1_5
	dey
	sta     (sp),y
	lda     _guess_1_5_status
	jsr     _oam_spr
;
; temp_y += 16;
;
L0468:	lda     #$10
	clc
	adc     _temp_y
	sta     _temp_y
;
; if (cur_guess_level != 1)
;
	lda     _cur_guess_level
	cmp     #$01
	jeq     L0469
;
; oam_spr(84, temp_y, guess_2_1, guess_2_1_status);
;
	jsr     decsp3
	lda     #$54
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_2_1
	dey
	sta     (sp),y
	lda     _guess_2_1_status
	jsr     _oam_spr
;
; oam_spr(100, temp_y, guess_2_2, guess_2_2_status);
;
	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_2_2
	dey
	sta     (sp),y
	lda     _guess_2_2_status
	jsr     _oam_spr
;
; oam_spr(116, temp_y, guess_2_3, guess_2_3_status);
;
	jsr     decsp3
	lda     #$74
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_2_3
	dey
	sta     (sp),y
	lda     _guess_2_3_status
	jsr     _oam_spr
;
; oam_spr(132, temp_y, guess_2_4, guess_2_4_status);
;
	jsr     decsp3
	lda     #$84
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_2_4
	dey
	sta     (sp),y
	lda     _guess_2_4_status
	jsr     _oam_spr
;
; oam_spr(148, temp_y, guess_2_5, guess_2_5_status);
;
	jsr     decsp3
	lda     #$94
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_2_5
	dey
	sta     (sp),y
	lda     _guess_2_5_status
	jsr     _oam_spr
;
; temp_y += 16;
;
L0469:	lda     #$10
	clc
	adc     _temp_y
	sta     _temp_y
;
; if (cur_guess_level != 2)
;
	lda     _cur_guess_level
	cmp     #$02
	jeq     L046A
;
; oam_spr(84, temp_y, guess_3_1, guess_3_1_status);
;
	jsr     decsp3
	lda     #$54
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_3_1
	dey
	sta     (sp),y
	lda     _guess_3_1_status
	jsr     _oam_spr
;
; oam_spr(100, temp_y, guess_3_2, guess_3_2_status);
;
	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_3_2
	dey
	sta     (sp),y
	lda     _guess_3_2_status
	jsr     _oam_spr
;
; oam_spr(116, temp_y, guess_3_3, guess_3_3_status);
;
	jsr     decsp3
	lda     #$74
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_3_3
	dey
	sta     (sp),y
	lda     _guess_3_3_status
	jsr     _oam_spr
;
; oam_spr(132, temp_y, guess_3_4, guess_3_4_status);
;
	jsr     decsp3
	lda     #$84
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_3_4
	dey
	sta     (sp),y
	lda     _guess_3_4_status
	jsr     _oam_spr
;
; oam_spr(148, temp_y, guess_3_5, guess_3_5_status);
;
	jsr     decsp3
	lda     #$94
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_3_5
	dey
	sta     (sp),y
	lda     _guess_3_5_status
	jsr     _oam_spr
;
; temp_y += 16;
;
L046A:	lda     #$10
	clc
	adc     _temp_y
	sta     _temp_y
;
; if (cur_guess_level != 3)
;
	lda     _cur_guess_level
	cmp     #$03
	jeq     L046B
;
; oam_spr(84, temp_y, guess_4_1, guess_4_1_status);
;
	jsr     decsp3
	lda     #$54
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_4_1
	dey
	sta     (sp),y
	lda     _guess_4_1_status
	jsr     _oam_spr
;
; oam_spr(100, temp_y, guess_4_2, guess_4_2_status);
;
	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_4_2
	dey
	sta     (sp),y
	lda     _guess_4_2_status
	jsr     _oam_spr
;
; oam_spr(116, temp_y, guess_4_3, guess_4_3_status);
;
	jsr     decsp3
	lda     #$74
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_4_3
	dey
	sta     (sp),y
	lda     _guess_4_3_status
	jsr     _oam_spr
;
; oam_spr(132, temp_y, guess_4_4, guess_4_4_status);
;
	jsr     decsp3
	lda     #$84
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_4_4
	dey
	sta     (sp),y
	lda     _guess_4_4_status
	jsr     _oam_spr
;
; oam_spr(148, temp_y, guess_4_5, guess_4_5_status);
;
	jsr     decsp3
	lda     #$94
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_4_5
	dey
	sta     (sp),y
	lda     _guess_4_5_status
	jsr     _oam_spr
;
; temp_y += 16;
;
L046B:	lda     #$10
	clc
	adc     _temp_y
	sta     _temp_y
;
; if (cur_guess_level != 4)
;
	lda     _cur_guess_level
	cmp     #$04
	jeq     L046C
;
; oam_spr(84, temp_y, guess_5_1, guess_5_1_status);
;
	jsr     decsp3
	lda     #$54
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_5_1
	dey
	sta     (sp),y
	lda     _guess_5_1_status
	jsr     _oam_spr
;
; oam_spr(100, temp_y, guess_5_2, guess_5_2_status);
;
	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_5_2
	dey
	sta     (sp),y
	lda     _guess_5_2_status
	jsr     _oam_spr
;
; oam_spr(116, temp_y, guess_5_3, guess_5_3_status);
;
	jsr     decsp3
	lda     #$74
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_5_3
	dey
	sta     (sp),y
	lda     _guess_5_3_status
	jsr     _oam_spr
;
; oam_spr(132, temp_y, guess_5_4, guess_5_4_status);
;
	jsr     decsp3
	lda     #$84
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_5_4
	dey
	sta     (sp),y
	lda     _guess_5_4_status
	jsr     _oam_spr
;
; oam_spr(148, temp_y, guess_5_5, guess_5_5_status);
;
	jsr     decsp3
	lda     #$94
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_5_5
	dey
	sta     (sp),y
	lda     _guess_5_5_status
	jsr     _oam_spr
;
; temp_y += 16;
;
L046C:	lda     #$10
	clc
	adc     _temp_y
	sta     _temp_y
;
; if (cur_guess_level != 5)
;
	lda     _cur_guess_level
	cmp     #$05
	bne     L046D
;
; }
;
	rts
;
; oam_spr(84, temp_y, guess_6_1, guess_6_1_status);
;
L046D:	jsr     decsp3
	lda     #$54
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_6_1
	dey
	sta     (sp),y
	lda     _guess_6_1_status
	jsr     _oam_spr
;
; oam_spr(100, temp_y, guess_6_2, guess_6_2_status);
;
	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_6_2
	dey
	sta     (sp),y
	lda     _guess_6_2_status
	jsr     _oam_spr
;
; oam_spr(116, temp_y, guess_6_3, guess_6_3_status);
;
	jsr     decsp3
	lda     #$74
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_6_3
	dey
	sta     (sp),y
	lda     _guess_6_3_status
	jsr     _oam_spr
;
; oam_spr(132, temp_y, guess_6_4, guess_6_4_status);
;
	jsr     decsp3
	lda     #$84
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_6_4
	dey
	sta     (sp),y
	lda     _guess_6_4_status
	jsr     _oam_spr
;
; oam_spr(148, temp_y, guess_6_5, guess_6_5_status);
;
	jsr     decsp3
	lda     #$94
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _guess_6_5
	dey
	sta     (sp),y
	lda     _guess_6_5_status
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cur_guess (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cur_guess: near

.segment	"CODE"

;
; temp_y = 40;
;
	lda     #$28
	sta     _temp_y
;
; for (index = 0; index < cur_guess_level; ++index)
;
	lda     #$00
	sta     _index
	tax
L046E:	lda     _index
	cmp     _cur_guess_level
	txa
	sbc     #$00
	bcs     L011B
;
; temp_y += 16;
;
	lda     #$10
	clc
	adc     _temp_y
	sta     _temp_y
;
; for (index = 0; index < cur_guess_level; ++index)
;
	inc     _index
	jmp     L046E
;
; oam_spr(84, temp_y, cur_guess_one, 1);
;
L011B:	jsr     decsp3
	lda     #$54
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _cur_guess_one
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(100, temp_y, cur_guess_two, 1);
;
	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _cur_guess_two
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(116, temp_y, cur_guess_three, 1);
;
	jsr     decsp3
	lda     #$74
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _cur_guess_three
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(132, temp_y, cur_guess_four, 1);
;
	jsr     decsp3
	lda     #$84
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _cur_guess_four
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(148, temp_y, cur_guess_five, 1);
;
	jsr     decsp3
	lda     #$94
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _cur_guess_five
	dey
	sta     (sp),y
	lda     #$01
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_keyboard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_keyboard: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; one_vram_buffer('Q', NTADR_A(TOP_KEYBOARD_X, TOP_KEYBOARD_Y));
;
	lda     #$51
	jsr     pusha
	ldx     #$22
	lda     #$86
	jsr     _one_vram_buffer
;
; one_vram_buffer('W', NTADR_A(TOP_KEYBOARD_X + 2, TOP_KEYBOARD_Y));
;
	lda     #$57
	jsr     pusha
	ldx     #$22
	lda     #$88
	jsr     _one_vram_buffer
;
; one_vram_buffer('E', NTADR_A(TOP_KEYBOARD_X + 4, TOP_KEYBOARD_Y));
;
	lda     #$45
	jsr     pusha
	ldx     #$22
	lda     #$8A
	jsr     _one_vram_buffer
;
; one_vram_buffer('R', NTADR_A(TOP_KEYBOARD_X + 6, TOP_KEYBOARD_Y));
;
	lda     #$52
	jsr     pusha
	ldx     #$22
	lda     #$8C
	jsr     _one_vram_buffer
;
; one_vram_buffer('T', NTADR_A(TOP_KEYBOARD_X + 8, TOP_KEYBOARD_Y));
;
	lda     #$54
	jsr     pusha
	ldx     #$22
	lda     #$8E
	jsr     _one_vram_buffer
;
; one_vram_buffer('Y', NTADR_A(TOP_KEYBOARD_X + 10, TOP_KEYBOARD_Y));
;
	lda     #$59
	jsr     pusha
	ldx     #$22
	lda     #$90
	jsr     _one_vram_buffer
;
; one_vram_buffer('U', NTADR_A(TOP_KEYBOARD_X + 12, TOP_KEYBOARD_Y));
;
	lda     #$55
	jsr     pusha
	ldx     #$22
	lda     #$92
	jsr     _one_vram_buffer
;
; one_vram_buffer('I', NTADR_A(TOP_KEYBOARD_X + 14, TOP_KEYBOARD_Y));
;
	lda     #$49
	jsr     pusha
	ldx     #$22
	lda     #$94
	jsr     _one_vram_buffer
;
; one_vram_buffer('O', NTADR_A(TOP_KEYBOARD_X + 16, TOP_KEYBOARD_Y));
;
	lda     #$4F
	jsr     pusha
	ldx     #$22
	lda     #$96
	jsr     _one_vram_buffer
;
; one_vram_buffer('P', NTADR_A(TOP_KEYBOARD_X + 18, TOP_KEYBOARD_Y));
;
	lda     #$50
	jsr     pusha
	ldx     #$22
	lda     #$98
	jsr     _one_vram_buffer
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; one_vram_buffer('A', NTADR_A(MID_KEYBOARD_X, MID_KEYBOARD_Y) - 1);
;
	lda     #$41
	jsr     pusha
	ldx     #$22
	lda     #$C7
	jsr     _one_vram_buffer
;
; one_vram_buffer('S', NTADR_A(MID_KEYBOARD_X + 2, MID_KEYBOARD_Y) - 1);
;
	lda     #$53
	jsr     pusha
	ldx     #$22
	lda     #$C9
	jsr     _one_vram_buffer
;
; one_vram_buffer('D', NTADR_A(MID_KEYBOARD_X + 4, MID_KEYBOARD_Y) - 1);
;
	lda     #$44
	jsr     pusha
	ldx     #$22
	lda     #$CB
	jsr     _one_vram_buffer
;
; one_vram_buffer('F', NTADR_A(MID_KEYBOARD_X + 6, MID_KEYBOARD_Y) - 1);
;
	lda     #$46
	jsr     pusha
	ldx     #$22
	lda     #$CD
	jsr     _one_vram_buffer
;
; one_vram_buffer('G', NTADR_A(MID_KEYBOARD_X + 8, MID_KEYBOARD_Y) - 1);
;
	lda     #$47
	jsr     pusha
	ldx     #$22
	lda     #$CF
	jsr     _one_vram_buffer
;
; one_vram_buffer('H', NTADR_A(MID_KEYBOARD_X + 10, MID_KEYBOARD_Y) - 1);
;
	lda     #$48
	jsr     pusha
	ldx     #$22
	lda     #$D1
	jsr     _one_vram_buffer
;
; one_vram_buffer('J', NTADR_A(MID_KEYBOARD_X + 12, MID_KEYBOARD_Y) - 1);
;
	lda     #$4A
	jsr     pusha
	ldx     #$22
	lda     #$D3
	jsr     _one_vram_buffer
;
; one_vram_buffer('K', NTADR_A(MID_KEYBOARD_X + 14, MID_KEYBOARD_Y) - 1);
;
	lda     #$4B
	jsr     pusha
	ldx     #$22
	lda     #$D5
	jsr     _one_vram_buffer
;
; one_vram_buffer('L', NTADR_A(MID_KEYBOARD_X + 16, MID_KEYBOARD_Y) - 1);
;
	lda     #$4C
	jsr     pusha
	ldx     #$22
	lda     #$D7
	jsr     _one_vram_buffer
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; one_vram_buffer('Z', NTADR_A(BOTTOM_KEYBOARD_X, BOTTOM_KEYBOARD_Y) - 1);
;
	lda     #$5A
	jsr     pusha
	ldx     #$23
	lda     #$09
	jsr     _one_vram_buffer
;
; one_vram_buffer('X', NTADR_A(BOTTOM_KEYBOARD_X + 2, BOTTOM_KEYBOARD_Y) - 1);
;
	lda     #$58
	jsr     pusha
	ldx     #$23
	lda     #$0B
	jsr     _one_vram_buffer
;
; one_vram_buffer('C', NTADR_A(BOTTOM_KEYBOARD_X + 4, BOTTOM_KEYBOARD_Y) - 1);
;
	lda     #$43
	jsr     pusha
	ldx     #$23
	lda     #$0D
	jsr     _one_vram_buffer
;
; one_vram_buffer('V', NTADR_A(BOTTOM_KEYBOARD_X + 6, BOTTOM_KEYBOARD_Y) - 1);
;
	lda     #$56
	jsr     pusha
	ldx     #$23
	lda     #$0F
	jsr     _one_vram_buffer
;
; one_vram_buffer('B', NTADR_A(BOTTOM_KEYBOARD_X + 8, BOTTOM_KEYBOARD_Y) - 1);
;
	lda     #$42
	jsr     pusha
	ldx     #$23
	lda     #$11
	jsr     _one_vram_buffer
;
; one_vram_buffer('N', NTADR_A(BOTTOM_KEYBOARD_X + 10, BOTTOM_KEYBOARD_Y) - 1);
;
	lda     #$4E
	jsr     pusha
	ldx     #$23
	lda     #$13
	jsr     _one_vram_buffer
;
; one_vram_buffer('M', NTADR_A(BOTTOM_KEYBOARD_X + 12, BOTTOM_KEYBOARD_Y) - 1);
;
	lda     #$4D
	jsr     pusha
	ldx     #$23
	lda     #$15
	jsr     _one_vram_buffer
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ keyboard_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_keyboard_movement: near

.segment	"CODE"

;
; if (pad1_new & PAD_LEFT)
;
	lda     _pad1_new
	and     #$02
	beq     L046F
;
; if (cursor_x_level > 0)
;
	lda     _cursor_x_level
	beq     L046F
;
; --cursor_x_level;
;
	dec     _cursor_x_level
;
; if (pad1_new & PAD_RIGHT)
;
L046F:	lda     _pad1_new
	and     #$01
	beq     L0478
;
; if (cursor_y_level == 0 && cursor_x_level < 9)
;
	lda     _cursor_y_level
	bne     L0472
	lda     _cursor_x_level
	cmp     #$09
	bcs     L0472
;
; ++cursor_x_level;
;
	inc     _cursor_x_level
;
; if (cursor_y_level == 1 && cursor_x_level < 8)
;
L0472:	lda     _cursor_y_level
	cmp     #$01
	bne     L0475
	lda     _cursor_x_level
	cmp     #$08
	bcs     L0475
;
; ++cursor_x_level;
;
	inc     _cursor_x_level
;
; if (cursor_y_level == 2 && cursor_x_level < 6)
;
L0475:	lda     _cursor_y_level
	cmp     #$02
	bne     L0478
	lda     _cursor_x_level
	cmp     #$06
	bcs     L0478
;
; ++cursor_x_level;
;
	inc     _cursor_x_level
;
; if (pad1_new & PAD_DOWN)
;
L0478:	lda     _pad1_new
	and     #$04
	beq     L047F
;
; if (cursor_y_level == 0 && cursor_x_level == 9)
;
	lda     _cursor_y_level
	bne     L047B
	lda     _cursor_x_level
	cmp     #$09
	bne     L047B
;
; cursor_x_level = 8;
;
	lda     #$08
	sta     _cursor_x_level
;
; if (cursor_y_level == 1 && cursor_x_level == 8)
;
L047B:	lda     _cursor_y_level
	cmp     #$01
	bne     L047E
	lda     _cursor_x_level
	cmp     #$08
	bne     L047E
;
; cursor_x_level = 6;
;
	lda     #$06
	sta     _cursor_x_level
;
; if (cursor_y_level < 2)
;
L047E:	lda     _cursor_y_level
	cmp     #$02
	bcs     L047F
;
; ++cursor_y_level;
;
	inc     _cursor_y_level
;
; if (pad1_new & PAD_UP)
;
L047F:	lda     _pad1_new
	and     #$08
	beq     L0480
;
; if (cursor_y_level > 0)
;
	lda     _cursor_y_level
	beq     L0480
;
; --cursor_y_level;
;
	dec     _cursor_y_level
;
; if (pad1_new & PAD_A)
;
L0480:	lda     _pad1_new
	and     #$80
	beq     L048A
;
; if (cursor_y_level == 0)
;
	lda     _cursor_y_level
	bne     L0481
;
; cur_guess_char = keyboard_zero[cursor_x_level];
;
	ldy     _cursor_x_level
	lda     _keyboard_zero,y
	sta     _cur_guess_char
;
; if (cursor_y_level == 1)
;
L0481:	lda     _cursor_y_level
	cmp     #$01
	bne     L0482
;
; cur_guess_char = keyboard_one[cursor_x_level];
;
	ldy     _cursor_x_level
	lda     _keyboard_one,y
	sta     _cur_guess_char
;
; if (cursor_y_level == 2)
;
L0482:	lda     _cursor_y_level
	cmp     #$02
	bne     L0483
;
; cur_guess_char = keyboard_two[cursor_x_level];
;
	ldy     _cursor_x_level
	lda     _keyboard_two,y
	sta     _cur_guess_char
;
; switch (cur_guess_space)
;
L0483:	lda     _cur_guess_space
;
; }
;
	beq     L0484
	cmp     #$01
	beq     L0485
	cmp     #$02
	beq     L0486
	cmp     #$03
	beq     L0487
	cmp     #$04
	beq     L0488
	jmp     L0489
;
; cur_guess_one = cur_guess_char;
;
L0484:	lda     _cur_guess_char
	sta     _cur_guess_one
;
; break;
;
	jmp     L0489
;
; cur_guess_two = cur_guess_char;
;
L0485:	lda     _cur_guess_char
	sta     _cur_guess_two
;
; break;
;
	jmp     L0489
;
; cur_guess_three = cur_guess_char;
;
L0486:	lda     _cur_guess_char
	sta     _cur_guess_three
;
; break;
;
	jmp     L0489
;
; cur_guess_four = cur_guess_char;
;
L0487:	lda     _cur_guess_char
	sta     _cur_guess_four
;
; break;
;
	jmp     L0489
;
; cur_guess_five = cur_guess_char;
;
L0488:	lda     _cur_guess_char
	sta     _cur_guess_five
;
; if (cur_guess_space < 5)
;
L0489:	lda     _cur_guess_space
	cmp     #$05
	bcs     L048A
;
; ++cur_guess_space;
;
	inc     _cur_guess_space
;
; if (pad1_new & PAD_B)
;
L048A:	lda     _pad1_new
	and     #$40
	beq     L0491
;
; switch (cur_guess_space)
;
	lda     _cur_guess_space
;
; }
;
	cmp     #$01
	beq     L048B
	cmp     #$02
	beq     L048C
	cmp     #$03
	beq     L048D
	cmp     #$04
	beq     L048E
	cmp     #$05
	beq     L048F
	jmp     L0490
;
; cur_guess_one = ' ';
;
L048B:	lda     #$20
	sta     _cur_guess_one
;
; break;
;
	jmp     L0490
;
; cur_guess_two = ' ';
;
L048C:	lda     #$20
	sta     _cur_guess_two
;
; break;
;
	jmp     L0490
;
; cur_guess_three = ' ';
;
L048D:	lda     #$20
	sta     _cur_guess_three
;
; break;
;
	jmp     L0490
;
; cur_guess_four = ' ';
;
L048E:	lda     #$20
	sta     _cur_guess_four
;
; break;
;
	jmp     L0490
;
; cur_guess_five = ' ';
;
L048F:	lda     #$20
	sta     _cur_guess_five
;
; if (cur_guess_space > 0)
;
L0490:	lda     _cur_guess_space
	beq     L0491
;
; --cur_guess_space;
;
	dec     _cur_guess_space
;
; if (pad1_new & PAD_START)
;
L0491:	lda     _pad1_new
	and     #$10
	beq     L0356
;
; if (cur_guess_level < 5)
;
	lda     _cur_guess_level
	cmp     #$05
	bcs     L0356
;
; submit_guess();
;
	jsr     _submit_guess
;
; reset_cur_level();
;
	jmp     _reset_cur_level
;
; }
;
L0356:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_game: near

.segment	"CODE"

;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; cur_guess_level = 0;
;
	lda     #$00
	sta     _cur_guess_level
;
; cursor_y_level = 0;
;
	sta     _cursor_y_level
;
; cursor_x_level = 0;
;
	sta     _cursor_x_level
;
; cursor_x = 0;
;
	sta     _cursor_x
;
; cursor_y = 0;
;
	sta     _cursor_y
;
; guess_1_1 = ' ';
;
	lda     #$20
	sta     _guess_1_1
;
; guess_1_2 = ' ';
;
	sta     _guess_1_2
;
; guess_1_3 = ' ';
;
	sta     _guess_1_3
;
; guess_1_4 = ' ';
;
	sta     _guess_1_4
;
; guess_1_5 = ' ';
;
	sta     _guess_1_5
;
; guess_2_1 = ' ';
;
	sta     _guess_2_1
;
; guess_2_2 = ' ';
;
	sta     _guess_2_2
;
; guess_2_3 = ' ';
;
	sta     _guess_2_3
;
; guess_2_4 = ' ';
;
	sta     _guess_2_4
;
; guess_2_5 = ' ';
;
	sta     _guess_2_5
;
; guess_3_1 = ' ';
;
	sta     _guess_3_1
;
; guess_3_2 = ' ';
;
	sta     _guess_3_2
;
; guess_3_3 = ' ';
;
	sta     _guess_3_3
;
; guess_3_4 = ' ';
;
	sta     _guess_3_4
;
; guess_3_5 = ' ';
;
	sta     _guess_3_5
;
; guess_4_1 = ' ';
;
	sta     _guess_4_1
;
; guess_4_2 = ' ';
;
	sta     _guess_4_2
;
; guess_4_3 = ' ';
;
	sta     _guess_4_3
;
; guess_4_4 = ' ';
;
	sta     _guess_4_4
;
; guess_4_5 = ' ';
;
	sta     _guess_4_5
;
; guess_5_1 = ' ';
;
	sta     _guess_5_1
;
; guess_5_2 = ' ';
;
	sta     _guess_5_2
;
; guess_5_3 = ' ';
;
	sta     _guess_5_3
;
; guess_5_4 = ' ';
;
	sta     _guess_5_4
;
; guess_5_5 = ' ';
;
	sta     _guess_5_5
;
; guess_6_1 = ' ';
;
	sta     _guess_6_1
;
; guess_6_2 = ' ';
;
	sta     _guess_6_2
;
; guess_6_3 = ' ';
;
	sta     _guess_6_3
;
; guess_6_4 = ' ';
;
	sta     _guess_6_4
;
; guess_6_5 = ' ';
;
	sta     _guess_6_5
;
; guess_1_1_status = 1;
;
	lda     #$01
	sta     _guess_1_1_status
;
; guess_1_2_status = 1;
;
	sta     _guess_1_2_status
;
; guess_1_3_status = 1;
;
	sta     _guess_1_3_status
;
; guess_1_4_status = 1;
;
	sta     _guess_1_4_status
;
; guess_1_5_status = 1;
;
	sta     _guess_1_5_status
;
; guess_2_1_status = 1;
;
	sta     _guess_2_1_status
;
; guess_2_2_status = 1;
;
	sta     _guess_2_2_status
;
; guess_2_3_status = 1;
;
	sta     _guess_2_3_status
;
; guess_2_4_status = 1;
;
	sta     _guess_2_4_status
;
; guess_2_5_status = 1;
;
	sta     _guess_2_5_status
;
; guess_3_1_status = 1;
;
	sta     _guess_3_1_status
;
; guess_3_2_status = 1;
;
	sta     _guess_3_2_status
;
; guess_3_3_status = 1;
;
	sta     _guess_3_3_status
;
; guess_3_4_status = 1;
;
	sta     _guess_3_4_status
;
; guess_3_5_status = 1;
;
	sta     _guess_3_5_status
;
; guess_4_1_status = 1;
;
	sta     _guess_4_1_status
;
; guess_4_2_status = 1;
;
	sta     _guess_4_2_status
;
; guess_4_3_status = 1;
;
	sta     _guess_4_3_status
;
; guess_4_4_status = 1;
;
	sta     _guess_4_4_status
;
; guess_4_5_status = 1;
;
	sta     _guess_4_5_status
;
; guess_5_1_status = 1;
;
	sta     _guess_5_1_status
;
; guess_5_2_status = 1;
;
	sta     _guess_5_2_status
;
; guess_5_3_status = 1;
;
	sta     _guess_5_3_status
;
; guess_5_4_status = 1;
;
	sta     _guess_5_4_status
;
; guess_5_5_status = 1;
;
	sta     _guess_5_5_status
;
; guess_6_1_status = 1;
;
	sta     _guess_6_1_status
;
; guess_6_2_status = 1;
;
	sta     _guess_6_2_status
;
; guess_6_3_status = 1;
;
	sta     _guess_6_3_status
;
; guess_6_4_status = 1;
;
	sta     _guess_6_4_status
;
; guess_6_5_status = 1;
;
	sta     _guess_6_5_status
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; set_vram_update(0);
;
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; for (tempint = 0; tempint < 1024; ++tempint)
;
	lda     #$00
	sta     _tempint
	sta     _tempint+1
L01F5:	ldx     _tempint+1
	cpx     #$04
	bcs     L01F6
;
; vram_put(0x00);
;
	lda     #$00
	jsr     _vram_put
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; for (tempint = 0; tempint < 1024; ++tempint)
;
	inc     _tempint
	bne     L01F5
	inc     _tempint+1
	jmp     L01F5
;
; ppu_on_all();
;
L01F6:	jsr     _ppu_on_all
;
; select_word();
;
	jsr     _select_word
;
; reset_cur_level();
;
	jsr     _reset_cur_level
;
; draw_keyboard();
;
	jmp     _draw_keyboard

.endproc

; ---------------------------------------------------------------
; void __near__ reset_cur_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_cur_level: near

.segment	"CODE"

;
; cur_guess_space = 0;
;
	lda     #$00
	sta     _cur_guess_space
;
; cur_guess_one = ' ';
;
	lda     #$20
	sta     _cur_guess_one
;
; cur_guess_two = ' ';
;
	sta     _cur_guess_two
;
; cur_guess_three = ' ';
;
	sta     _cur_guess_three
;
; cur_guess_four = ' ';
;
	sta     _cur_guess_four
;
; cur_guess_five = ' ';
;
	sta     _cur_guess_five
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ submit_guess (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_submit_guess: near

.segment	"CODE"

;
; if (word_to_guess[0] == cur_guess_one)
;
	lda     _cur_guess_one
	cmp     _word_to_guess
	bne     L04B0
;
; check_one = CHECK_HIT;
;
	lda     #$03
;
; else if (word_to_guess[1] == cur_guess_one || word_to_guess[2] == cur_guess_one || word_to_guess[3] == cur_guess_one || word_to_guess[4] == cur_guess_one)
;
	jmp     L04AB
L04B0:	lda     _cur_guess_one
	cmp     _word_to_guess+1
	beq     L04B1
	cmp     _word_to_guess+2
	beq     L04B1
	cmp     _word_to_guess+3
	beq     L04B1
	cmp     _word_to_guess+4
	bne     L04B2
;
; check_one = CHECK_CLOSE;
;
L04B1:	lda     #$02
;
; else
;
	jmp     L04AB
;
; check_one = CHECK_MISS;
;
L04B2:	lda     #$01
L04AB:	sta     _check_one
;
; if (word_to_guess[1] == cur_guess_two)
;
	lda     _cur_guess_two
	cmp     _word_to_guess+1
	bne     L04B3
;
; check_two = CHECK_HIT;
;
	lda     #$03
;
; else if (word_to_guess[0] == cur_guess_two || word_to_guess[2] == cur_guess_two || word_to_guess[3] == cur_guess_two || word_to_guess[4] == cur_guess_two)
;
	jmp     L04AC
L04B3:	lda     _cur_guess_two
	cmp     _word_to_guess
	beq     L04B4
	cmp     _word_to_guess+2
	beq     L04B4
	cmp     _word_to_guess+3
	beq     L04B4
	cmp     _word_to_guess+4
	bne     L04B5
;
; check_two = CHECK_CLOSE;
;
L04B4:	lda     #$02
;
; else
;
	jmp     L04AC
;
; check_two = CHECK_MISS;
;
L04B5:	lda     #$01
L04AC:	sta     _check_two
;
; if (word_to_guess[2] == cur_guess_three)
;
	lda     _cur_guess_three
	cmp     _word_to_guess+2
	bne     L04B6
;
; check_three = CHECK_HIT;
;
	lda     #$03
;
; else if (word_to_guess[0] == cur_guess_three || word_to_guess[1] == cur_guess_three || word_to_guess[3] == cur_guess_three || word_to_guess[4] == cur_guess_three)
;
	jmp     L04AD
L04B6:	lda     _cur_guess_three
	cmp     _word_to_guess
	beq     L04B7
	cmp     _word_to_guess+1
	beq     L04B7
	cmp     _word_to_guess+3
	beq     L04B7
	cmp     _word_to_guess+4
	bne     L04B8
;
; check_three = CHECK_CLOSE;
;
L04B7:	lda     #$02
;
; else
;
	jmp     L04AD
;
; check_three = CHECK_MISS;
;
L04B8:	lda     #$01
L04AD:	sta     _check_three
;
; if (word_to_guess[3] == cur_guess_four)
;
	lda     _cur_guess_four
	cmp     _word_to_guess+3
	bne     L04B9
;
; check_four = CHECK_HIT;
;
	lda     #$03
;
; else if (word_to_guess[0] == cur_guess_four || word_to_guess[1] == cur_guess_four || word_to_guess[2] == cur_guess_four || word_to_guess[4] == cur_guess_four)
;
	jmp     L04AE
L04B9:	lda     _cur_guess_four
	cmp     _word_to_guess
	beq     L04BA
	cmp     _word_to_guess+1
	beq     L04BA
	cmp     _word_to_guess+2
	beq     L04BA
	cmp     _word_to_guess+4
	bne     L04BB
;
; check_four = CHECK_CLOSE;
;
L04BA:	lda     #$02
;
; else
;
	jmp     L04AE
;
; check_four = CHECK_MISS;
;
L04BB:	lda     #$01
L04AE:	sta     _check_four
;
; if (word_to_guess[4] == cur_guess_five)
;
	lda     _cur_guess_five
	cmp     _word_to_guess+4
	bne     L04BC
;
; check_five = CHECK_HIT;
;
	lda     #$03
;
; else if (word_to_guess[0] == cur_guess_five || word_to_guess[1] == cur_guess_five || word_to_guess[2] == cur_guess_five || word_to_guess[3] == cur_guess_five)
;
	jmp     L04AF
L04BC:	lda     _cur_guess_five
	cmp     _word_to_guess
	beq     L04BD
	cmp     _word_to_guess+1
	beq     L04BD
	cmp     _word_to_guess+2
	beq     L04BD
	cmp     _word_to_guess+3
	bne     L04BE
;
; check_five = CHECK_CLOSE;
;
L04BD:	lda     #$02
;
; else
;
	jmp     L04AF
;
; check_five = CHECK_MISS;
;
L04BE:	lda     #$01
L04AF:	sta     _check_five
;
; guess_X_1 = cur_guess_one;
;
	lda     _cur_guess_one
	sta     _guess_X_1
;
; guess_X_1_status = check_one;
;
	lda     _check_one
	sta     _guess_X_1_status
;
; guess_X_2 = cur_guess_two;
;
	lda     _cur_guess_two
	sta     _guess_X_2
;
; guess_X_2_status = check_two;
;
	lda     _check_two
	sta     _guess_X_2_status
;
; guess_X_3 = cur_guess_three;
;
	lda     _cur_guess_three
	sta     _guess_X_3
;
; guess_X_3_status = check_three;
;
	lda     _check_three
	sta     _guess_X_3_status
;
; guess_X_4 = cur_guess_four;
;
	lda     _cur_guess_four
	sta     _guess_X_4
;
; guess_X_4_status = check_four;
;
	lda     _check_four
	sta     _guess_X_4_status
;
; guess_X_5 = cur_guess_five;
;
	lda     _cur_guess_five
	sta     _guess_X_5
;
; guess_X_5_status = check_five;
;
	lda     _check_five
	sta     _guess_X_5_status
;
; switch (cur_guess_level)
;
	lda     _cur_guess_level
;
; }
;
	beq     L04BF
	cmp     #$01
	beq     L04C0
	cmp     #$02
	jeq     L04C1
	cmp     #$03
	jeq     L04C2
	cmp     #$04
	jeq     L04C3
	cmp     #$05
	jeq     L04C4
	jmp     L04C5
;
; guess_1_1 = guess_X_1;
;
L04BF:	lda     _guess_X_1
	sta     _guess_1_1
;
; guess_1_1_status = guess_X_1_status;
;
	lda     _guess_X_1_status
	sta     _guess_1_1_status
;
; guess_1_2 = guess_X_2;
;
	lda     _guess_X_2
	sta     _guess_1_2
;
; guess_1_2_status = guess_X_2_status;
;
	lda     _guess_X_2_status
	sta     _guess_1_2_status
;
; guess_1_3 = guess_X_3;
;
	lda     _guess_X_3
	sta     _guess_1_3
;
; guess_1_3_status = guess_X_3_status;
;
	lda     _guess_X_3_status
	sta     _guess_1_3_status
;
; guess_1_4 = guess_X_4;
;
	lda     _guess_X_4
	sta     _guess_1_4
;
; guess_1_4_status = guess_X_4_status;
;
	lda     _guess_X_4_status
	sta     _guess_1_4_status
;
; guess_1_5 = guess_X_5;
;
	lda     _guess_X_5
	sta     _guess_1_5
;
; guess_1_5_status = guess_X_5_status;
;
	lda     _guess_X_5_status
	sta     _guess_1_5_status
;
; break;
;
	jmp     L04C5
;
; guess_2_1 = guess_X_1;
;
L04C0:	lda     _guess_X_1
	sta     _guess_2_1
;
; guess_2_1_status = guess_X_1_status;
;
	lda     _guess_X_1_status
	sta     _guess_2_1_status
;
; guess_2_2 = guess_X_2;
;
	lda     _guess_X_2
	sta     _guess_2_2
;
; guess_2_2_status = guess_X_2_status;
;
	lda     _guess_X_2_status
	sta     _guess_2_2_status
;
; guess_2_3 = guess_X_3;
;
	lda     _guess_X_3
	sta     _guess_2_3
;
; guess_2_3_status = guess_X_3_status;
;
	lda     _guess_X_3_status
	sta     _guess_2_3_status
;
; guess_2_4 = guess_X_4;
;
	lda     _guess_X_4
	sta     _guess_2_4
;
; guess_2_4_status = guess_X_4_status;
;
	lda     _guess_X_4_status
	sta     _guess_2_4_status
;
; guess_2_5 = guess_X_5;
;
	lda     _guess_X_5
	sta     _guess_2_5
;
; guess_2_5_status = guess_X_5_status;
;
	lda     _guess_X_5_status
	sta     _guess_2_5_status
;
; break;
;
	jmp     L04C5
;
; guess_3_1 = guess_X_1;
;
L04C1:	lda     _guess_X_1
	sta     _guess_3_1
;
; guess_3_1_status = guess_X_1_status;
;
	lda     _guess_X_1_status
	sta     _guess_3_1_status
;
; guess_3_2 = guess_X_2;
;
	lda     _guess_X_2
	sta     _guess_3_2
;
; guess_3_2_status = guess_X_2_status;
;
	lda     _guess_X_2_status
	sta     _guess_3_2_status
;
; guess_3_3 = guess_X_3;
;
	lda     _guess_X_3
	sta     _guess_3_3
;
; guess_3_3_status = guess_X_3_status;
;
	lda     _guess_X_3_status
	sta     _guess_3_3_status
;
; guess_3_4 = guess_X_4;
;
	lda     _guess_X_4
	sta     _guess_3_4
;
; guess_3_4_status = guess_X_4_status;
;
	lda     _guess_X_4_status
	sta     _guess_3_4_status
;
; guess_3_5 = guess_X_5;
;
	lda     _guess_X_5
	sta     _guess_3_5
;
; guess_3_5_status = guess_X_5_status;
;
	lda     _guess_X_5_status
	sta     _guess_3_5_status
;
; break;
;
	jmp     L04C5
;
; guess_4_1 = guess_X_1;
;
L04C2:	lda     _guess_X_1
	sta     _guess_4_1
;
; guess_4_1_status = guess_X_1_status;
;
	lda     _guess_X_1_status
	sta     _guess_4_1_status
;
; guess_4_2 = guess_X_2;
;
	lda     _guess_X_2
	sta     _guess_4_2
;
; guess_4_2_status = guess_X_2_status;
;
	lda     _guess_X_2_status
	sta     _guess_4_2_status
;
; guess_4_3 = guess_X_3;
;
	lda     _guess_X_3
	sta     _guess_4_3
;
; guess_4_3_status = guess_X_3_status;
;
	lda     _guess_X_3_status
	sta     _guess_4_3_status
;
; guess_4_4 = guess_X_4;
;
	lda     _guess_X_4
	sta     _guess_4_4
;
; guess_4_4_status = guess_X_4_status;
;
	lda     _guess_X_4_status
	sta     _guess_4_4_status
;
; guess_4_5 = guess_X_5;
;
	lda     _guess_X_5
	sta     _guess_4_5
;
; guess_4_5_status = guess_X_5_status;
;
	lda     _guess_X_5_status
	sta     _guess_4_5_status
;
; break;
;
	jmp     L04C5
;
; guess_5_1 = guess_X_1;
;
L04C3:	lda     _guess_X_1
	sta     _guess_5_1
;
; guess_5_1_status = guess_X_1_status;
;
	lda     _guess_X_1_status
	sta     _guess_5_1_status
;
; guess_5_2 = guess_X_2;
;
	lda     _guess_X_2
	sta     _guess_5_2
;
; guess_5_2_status = guess_X_2_status;
;
	lda     _guess_X_2_status
	sta     _guess_5_2_status
;
; guess_5_3 = guess_X_3;
;
	lda     _guess_X_3
	sta     _guess_5_3
;
; guess_5_3_status = guess_X_3_status;
;
	lda     _guess_X_3_status
	sta     _guess_5_3_status
;
; guess_5_4 = guess_X_4;
;
	lda     _guess_X_4
	sta     _guess_5_4
;
; guess_5_4_status = guess_X_4_status;
;
	lda     _guess_X_4_status
	sta     _guess_5_4_status
;
; guess_5_5 = guess_X_5;
;
	lda     _guess_X_5
	sta     _guess_5_5
;
; guess_5_5_status = guess_X_5_status;
;
	lda     _guess_X_5_status
	sta     _guess_5_5_status
;
; break;
;
	jmp     L04C5
;
; guess_6_1 = guess_X_1;
;
L04C4:	lda     _guess_X_1
	sta     _guess_6_1
;
; guess_6_1_status = guess_X_1_status;
;
	lda     _guess_X_1_status
	sta     _guess_6_1_status
;
; guess_6_2 = guess_X_2;
;
	lda     _guess_X_2
	sta     _guess_6_2
;
; guess_6_2_status = guess_X_2_status;
;
	lda     _guess_X_2_status
	sta     _guess_6_2_status
;
; guess_6_3 = guess_X_3;
;
	lda     _guess_X_3
	sta     _guess_6_3
;
; guess_6_3_status = guess_X_3_status;
;
	lda     _guess_X_3_status
	sta     _guess_6_3_status
;
; guess_6_4 = guess_X_4;
;
	lda     _guess_X_4
	sta     _guess_6_4
;
; guess_6_4_status = guess_X_4_status;
;
	lda     _guess_X_4_status
	sta     _guess_6_4_status
;
; guess_6_5 = guess_X_5;
;
	lda     _guess_X_5
	sta     _guess_6_5
;
; guess_6_5_status = guess_X_5_status;
;
	lda     _guess_X_5_status
	sta     _guess_6_5_status
;
; ++cur_guess_level;
;
L04C5:	inc     _cur_guess_level
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ select_word (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_select_word: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; if (game_mode == MODE_TITLE)
;
L04C6:	lda     _game_mode
	bne     L04C7
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; multi_vram_buffer_horz("NES.DLE", 7, NTADR_A(10, 10));
;
	jsr     decsp3
	lda     #<(L003C)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L003C)
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$4A
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("Press Start to Play", 19, NTADR_A(7, 16));
;
	jsr     decsp3
	lda     #<(L0046)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L0046)
	sta     (sp),y
	lda     #$13
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$07
	jsr     _multi_vram_buffer_horz
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	beq     L04C7
;
; init_game();
;
	jsr     _init_game
;
; if (game_mode == MODE_GAME)
;
L04C7:	lda     _game_mode
	cmp     #$01
	bne     L04C6
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; keyboard_movement();
;
	jsr     _keyboard_movement
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (1)
;
	jmp     L04C6

.endproc

